// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: ping.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PingService_Ping_FullMethodName                    = "/ping.PingService/Ping"
	PingService_PingServerStream_FullMethodName        = "/ping.PingService/PingServerStream"
	PingService_PingClientStream_FullMethodName        = "/ping.PingService/PingClientStream"
	PingService_PingBidirectionalStream_FullMethodName = "/ping.PingService/PingBidirectionalStream"
)

// PingServiceClient is the client API for PingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PingServerStream(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingService_PingServerStreamClient, error)
	PingClientStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingClientStreamClient, error)
	PingBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingBidirectionalStreamClient, error)
}

type pingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPingServiceClient(cc grpc.ClientConnInterface) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, PingService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) PingServerStream(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingService_PingServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingService_ServiceDesc.Streams[0], PingService_PingServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingService_PingServerStreamClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type pingServicePingServerStreamClient struct {
	grpc.ClientStream
}

func (x *pingServicePingServerStreamClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) PingClientStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingService_ServiceDesc.Streams[1], PingService_PingClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingClientStreamClient{stream}
	return x, nil
}

type PingService_PingClientStreamClient interface {
	Send(*PingRequest) error
	CloseAndRecv() (*PingResponse, error)
	grpc.ClientStream
}

type pingServicePingClientStreamClient struct {
	grpc.ClientStream
}

func (x *pingServicePingClientStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServicePingClientStreamClient) CloseAndRecv() (*PingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) PingBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (PingService_PingBidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingService_ServiceDesc.Streams[2], PingService_PingBidirectionalStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingBidirectionalStreamClient{stream}
	return x, nil
}

type PingService_PingBidirectionalStreamClient interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type pingServicePingBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *pingServicePingBidirectionalStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServicePingBidirectionalStreamClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingServiceServer is the server API for PingService service.
// All implementations must embed UnimplementedPingServiceServer
// for forward compatibility
type PingServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PingServerStream(*PingRequest, PingService_PingServerStreamServer) error
	PingClientStream(PingService_PingClientStreamServer) error
	PingBidirectionalStream(PingService_PingBidirectionalStreamServer) error
	mustEmbedUnimplementedPingServiceServer()
}

// UnimplementedPingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPingServiceServer struct {
}

func (UnimplementedPingServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPingServiceServer) PingServerStream(*PingRequest, PingService_PingServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingServerStream not implemented")
}
func (UnimplementedPingServiceServer) PingClientStream(PingService_PingClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingClientStream not implemented")
}
func (UnimplementedPingServiceServer) PingBidirectionalStream(PingService_PingBidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingBidirectionalStream not implemented")
}
func (UnimplementedPingServiceServer) mustEmbedUnimplementedPingServiceServer() {}

// UnsafePingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingServiceServer will
// result in compilation errors.
type UnsafePingServiceServer interface {
	mustEmbedUnimplementedPingServiceServer()
}

func RegisterPingServiceServer(s grpc.ServiceRegistrar, srv PingServiceServer) {
	s.RegisterService(&PingService_ServiceDesc, srv)
}

func _PingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_PingServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).PingServerStream(m, &pingServicePingServerStreamServer{stream})
}

type PingService_PingServerStreamServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type pingServicePingServerStreamServer struct {
	grpc.ServerStream
}

func (x *pingServicePingServerStreamServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PingService_PingClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).PingClientStream(&pingServicePingClientStreamServer{stream})
}

type PingService_PingClientStreamServer interface {
	SendAndClose(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type pingServicePingClientStreamServer struct {
	grpc.ServerStream
}

func (x *pingServicePingClientStreamServer) SendAndClose(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServicePingClientStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PingService_PingBidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).PingBidirectionalStream(&pingServicePingBidirectionalStreamServer{stream})
}

type PingService_PingBidirectionalStreamServer interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type pingServicePingBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *pingServicePingBidirectionalStreamServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServicePingBidirectionalStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingService_ServiceDesc is the grpc.ServiceDesc for PingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ping.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingServerStream",
			Handler:       _PingService_PingServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingClientStream",
			Handler:       _PingService_PingClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingBidirectionalStream",
			Handler:       _PingService_PingBidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ping.proto",
}
